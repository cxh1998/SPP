
right_shift_n: //rshiftN pdata,pdata
	sub loopcnt,0,null
	rtn zero
right_shift_n_loop: 
	rshift pdata,pdata
	loop right_shift_n_loop
	rtn

/* lshift. 0:1 byte; 1:2byte; 2:4byte; 3:8byte; 4:16byte*/
left_shift_n:
	force 1,pdata
	sub loopcnt,0,null
	rtn zero
left_shift_n_loop:
	lshift pdata,pdata
	loop left_shift_n_loop
	rtn
push_stack:
	deposit contw
	store 2, mem_contw
	storet 8,mem_temp
	deposit timeup
	store 4,mem_timeup
	call push_stack_rega_b_c
	deposit contr
	store 2, mem_contr
	rtn

push_stack_rega_b_c:
	deposit rega
	store 4, mem_rega
	deposit regb
	store 4, mem_regb
	deposit regc
	store 3, mem_regc
	rtn

pop_stack:
	fetcht 8,mem_temp
	fetch 4,mem_timeup
	iforce timeup
	call pop_stack_rega_b_c
	fetch 2, mem_contw
	iforce contw
	fetch 2, mem_contr
	iforce contr
	rtn

pop_stack_rega_b_c:
	fetch 4, mem_rega
	iforce rega
	fetch 4, mem_regb
	iforce regb
	fetch 3,mem_regc
	iforce regc
	rtn

get_contw:
	fetch 2,mem_contw
	copy pdata,contw
	rtn
get_contr:
	fetch 2,mem_contr
	copy pdata,contr
	rtn
store_contw:
	copy contw,pdata
	store 2,mem_contw
	rtn
store_contr:
	copy contr,pdata
	store 2,mem_contr
	rtn	
	

//
save_cont_pointers:
	copy contw,pdata
	store 2,mem_hold_contw
	copy contr,pdata
	store 2,mem_hold_contr
	rtn
load_cont_pointers:
	fetch 2,mem_hold_contw
	copy pdata,contw
	fetch 2,mem_hold_contr
	copy pdata,contr
	rtn

memcpy96:
	call memcpy32
memcpy64:
	call memcpy32
	branch memcpy32
memcpy12:
	call memcpy8
memcpy4:
	ifetch 4,contr
	istore 4,contw
	rtn	
memcpy8:
	ifetch 8,contr
	istore 8,contw
	rtn	

memcpy48:
	call memcpy16
memcpy32:
	call memcpy8
memcpy24:
	call memcpy8
memcpy16:
	call memcpy8
	branch memcpy8



delay_10ms:
	arg 10,loopcnt
delay_ms_wait:
	nop 12000
	loop delay_ms_wait
	rtn

bn_zero:
	force 3,loopcnt
memset0:
	force 0,pdata
memset8:
	istore   8,contw
	loop   memset8
	rtn

memset0_8:
	force 0,pdata
	istore 8,contw
	rtn
memset0_4:
	force 0,pdata
	istore 4,contw
	rtn	
	
clear_mem_256:
	force 4,loopcnt
	branch memset0 
clear_mem_512:
	force 8,loopcnt
	branch memset0 

clear_mem:
	deposit loopcnt
	rtn blank
	setarg 0
clear_mem_loop:
	istore 1,contw
	loop clear_mem_loop
	rtn
	

clear_temp_block:
	arg 32,loopcnt
	arg mem_temp_block0,contw
	branch clear_mem
	
xor_loop:
	ifetch   4,regc
	ifetcht 4,rega
	ixor     temp,pdata
	istore   4,contw	
	increase 4,rega
	increase 4,regc
	loop  xor_loop
	rtn
	
// 11 22 -> 22 11; 11 22 33 -> 33 22 11 
// rega:data addr ;loopnct:length
inverse_data:
	bpatchx patch3f_3,mem_patch3f
	copy loopcnt,pdata
	sub pdata,1,null
	rtn positive
	iadd rega,regb	
	increase -1,regb
	rshift loopcnt,loopcnt
inverse_loop:
	ifetcht 1,rega
	ifetch 1,regb
	istore 1,rega
	istoret 1,regb
	increase -1,regb
	increase 1,rega
	loop inverse_loop
	rtn


memcpy_fast:
	deposit loopcnt
	rtn blank
memcpy_fast_loop:
	increase -8,loopcnt
	call memcpy8,positive
	rtn zero
	branch memcpy_fast_loop,positive
	increase 8,loopcnt
memcpy_fast_loop_four:
	increase -4,loopcnt
	call memcpy4,positive
	rtn zero
	branch memcpy_fast_loop_four,positive
	increase 4,loopcnt
	branch memcpy
 
memcpy:
	deposit loopcnt
	rtn blank
memcpy_loop:
	ifetch 1,contr
	istore 1,contw
	loop memcpy_loop
	rtn

timer_stop:
	setarg 0
timer_init:
	rshift clkn_bt,temp
	storet 4,mem_last_clkn
	arg mem_timers,contw
	iforce temp
	lshift queue,pdata
	iadd contw,contw
	istoret 2,contw
	bpatchx patch3f_4,mem_patch3f
	rtn

timer_check_timeout:
	arg 0x800,timeup
	lshift16 timeup,timeup
	iadd timeup,pdata
	rtn


timer_reinit:
	arg 0,queue
timer_check:
	bpatchx patch3f_5,mem_patch3f
	fetcht 4,mem_last_clkn
	rshift clkn_bt,pdata
	store 4,mem_last_clkn	
	isub temp,null
	ncall timer_check_timeout,positive	
	isub temp,timeup
	copy timeup,temp
	arg mem_timers,contr
	copy contr,contw
	arg 16,loopcnt
timer_loop:
	ifetch 2,contr
	isub temp,pdata
	branch timer_counting,positive
	force 0,pdata
timer_counting:
	istore 2,contw
	loop timer_loop	
	arg mem_timers,contr
	lshift queue,pdata
	iadd contr,contr
	ifetch 2,contr
	rtn



	/* pdata 28+16 bit add temp 26+16 bit, result in temp */
clk_add:
	iadd temp,temp
	copy temp, loopcnt
	setarg 3750
	isub loopcnt,pdata
	rtn positive
	sub pdata,0,pdata
	rshift16 temp,temp
	increase 1,temp
	lshift16 temp,temp
	ior temp,temp
	rtn

clk_diff_rt:
	call clk_diff
	branch clk2rt

/* pdata -temp -> pdata, all are 28+16 bits, set user if negative */
clk_diff:
	disable user
	isub temp,pdata
	branch clk_diff_pos,positive
	enable user
	sub pdata,0,pdata
clk_diff_pos:
	rtnbit0 15
	arg -61786,temp
	iadd temp,pdata
	set0 64,pdata
	rtn

clk2rt:
	iforce contr
	rshift16 pdata,pdata
	arg 3750,temp
	imul32 temp,pdata
	iadd contr,pdata
	rtn

	/* pdata = clks in, temp = lpo out */
clk2lpo:
	lshift8 pdata,pdata
	lshift4 pdata,pdata
	fetcht 3,mem_clks_per_lpo
	idiv temp
	call wait_div_end
	quotient temp
	rtn

	/* rt clk -> bt+rt clk */
clk2bt:
	arg 3750,temp
	idiv temp
	call wait_div_end
	quotient pdata
	lshift16 pdata,pdata
	remainder temp
	ior temp,temp
	rtn



//input:contru 
//output:temp
//used register: temp regc
string2dec_from_uart:
	arg 0,temp
string2dec_from_uart_done:
         copy temp,regc
	ifetch 1,contru
	call uchar2dialog	
	copy regc,temp
	call swap
	arg 10,regb
	imul32 regb,pdata
	iadd temp,pdata
	copy pdata,temp
	loop string2dec_from_uart_done
	rtn
	


uchar2dialog:
	arg 0x3a,temp
	isub temp,null
	nbranch uchar2dialog_number,positive
	arg 0x61,temp
	isub temp,null
	branch uchar2dialog_a2f,positive
	arg 0x37,temp
	isub temp,pdata
	rtn
uchar2dialog_number:
	arg 0x30,temp
	isub temp,pdata
	rtn
uchar2dialog_a2f:
	arg 0x57,temp
	isub temp,pdata
	rtn

pn9:
	copy temp,alarm
	setarg 0x1ff
	force 0,regb
pn9_loop:	
	rshift3 pdata,rega
	rshift rega,rega
	ixor rega,rega
	isolate1 0,rega
	setflag true,9,pdata
	rshift temp,temp
	isolate1 0,pdata
	setflag true,7,temp
	rshift pdata,pdata
	increase 1,regb
	compare 0,regb,0x7
	nbranch pn9_loop,true
	istoret 1,contw
	loop pn9_loop
	copy alarm,temp
	rtn


wait_div_end:	
	rtn modone
	branch wait_div_end



//input:
//	count:loopcnt str1:rega str2:regb
//output:
//	same:set falg true ,diff set falg false
// using:
//	reg:temp null flag:zero
compare_loop:
string_compare:
	ifetch 1,rega
	ifetcht 1,regb
	isub temp,null
	nrtn zero
	increase 1,rega
	increase 1,regb
	loop string_compare
	force 0,null
	rtn

	/* pdata = temp if pdata > temp */
ceiling:
	isub temp,null
	nrtn positive
	deposit temp
	rtn
	
swap:
	iadd temp,pdata
	isub temp,temp
	isub temp,pdata
	rtn

clean_mem:
	arg 0x200,loopcnt
	arg 0x4000,contw
	branch memset0				// clear xram at boot

	//cb function ptr in pdata
callback_func:
	rtn blank
	copy pdata,pc	//rtn through cb functon.
	//branch assert

wait_uarttx:
	hfetch 2,core_uart_txitems
	nbranch wait_uarttx,blank
	rtn

ice_break:
	hjam 0x1,core_ice_ctrl
	rtn

ice_setbp:
	hstore 2,core_ice_break0
	hfetch 1,core_ice_ctrl
	set1 4,pdata
	hstore 1,core_ice_ctrl
	rtn
ice_setbp2:
	hstore 2,core_ice_break1
	hfetch 1,core_ice_ctrl
	set1 6,pdata
	hstore 1,core_ice_ctrl
	rtn
	
ice_set_write_bp:
	hstore 2,core_ice_break0
	hjam 0x30,core_ice_ctrl
	rtn
	


test_enable_white:
	hfetch 1,core_config
	set0 whiteoff_bit,pdata
	hstore 1,core_config			/* whitening on */
	rtn

check_uart_tx_buff:
	hfetch 2,core_uart_txitems
	arg UART_AIR_CONTROL_THRESHOLD,temp
pdata_sub_temp:
	isub temp,null
	rtn

	//fuction fifo_in
	//rega pointer to fifo memory , *(rega+len) is the end of fifo
	//mem_fifo_temp data into fifo
	//assert if fifo was full
fifo_in:
	bpatchx patch3f_6,mem_patch3f
	ifetcht UTIL_FIFO_LEN,rega
	and temp,0xff,pdata
	nbranch fifo_in_push,blank
	rshift8 temp,pdata
	istore UTIL_FIFO_LEN,rega
fifo_in_push:
	increase UTIL_FIFO_LEN+UTIL_FIFO_OFFSET,rega
	ifetch 1,rega
	nbranch assert,blank //fifo full
	fetch 1,mem_fifo_temp
	istore 1,rega
	rtn
	
	//fuction fifo_out
	//rega pointer to fifo memory
	//pdata  data from fifo, blank mains fifo empty
fifo_out:
	bpatchx patch3f_7,mem_patch3f
	arg UTIL_FIFO_LEN,loopcnt
	ifetch UTIL_FIFO_LEN,rega
	rtn blank
fifo_out_loop:
	ifetch 1,rega
	nbranch fifo_out_end,blank
	increase 1,rega
	loop fifo_out_loop
	branch assert
fifo_out_end:
	arg 0,temp
	istoret 1,rega
	rtn

	//fuction fifo_is_empty
	//rega pointer to fifo memory
	//blank--- fifo is empty
fifo_is_empty:
	ifetch UTIL_FIFO_LEN,rega
	rtn

	//fuction fifo_is_full
	//rega pointer to fifo memory
	//blank--- fifo is NOT full
fifo_is_full:
	ifetch 1,rega
	rtn
	//rega pointer to fifo memory
	//blank--- fifo is NOT near full
fifo_is_near_full:
	ifetch 2,rega
	rtn

	//rega pointer to fifo memory
	//count output via pdata
fifo_content_count:
	arg 0,temp
fifo_content_count_loop:
	fetch 1,contr
	loop fifo_content_count_loop,blank
	increase 1,temp
	loop fifo_content_count_loop
	copy temp,pdata
	rtn
	
not_greater_than:
	isub temp,null
	nrtn positive
	copy temp,pdata
	rtn


disable_positive:
	force -1,null
	rtn
enable_positive:
disable_zero:
	force 1,null
	rtn
enable_zero:
	force 0,null
	rtn

enable_user:
	enable user
	rtn
	
disable_user:
	disable user
	rtn
	
enable_user2:
	enable user2
	rtn
	
disable_user2:
	disable user2
	rtn

disable_blank:
	setarg 1
	rtn

enable_blank:
	setarg 0
	rtn


reverse_byte:
	copy loopcnt,pdata
	rtn blank
	copy contr,pdata
	iadd loopcnt,pdata
	increase -1,pdata
	copy pdata,contr	
reverse_loop:
	ifetch 1,contr
	increase -2,contr
	istore 1,contw
	loop reverse_loop
	rtn


