ui_init:
	call lpm_disable_exen_output
	rtn wake
	call ui_button_init
	call ui_timer_init
	branch ui_led_init_global

ui_dispatch:
	call ui_led_dispatch
	
	branch ui_timer_check
	
ui_button_init:
	fetch 1,mem_ui_button_gpio
	rtneq UI_BUTTON_GPIO_DISABLE
	iforce temp
	call gpio_config_output
	fetcht 1,mem_ui_button_gpio
	call gpio_out_inactive
	nop 100
	fetcht 1,mem_ui_button_gpio
	call gpio_config_input
	branch ui_button_polling


	
ui_button_polling:
	bpatchx patch3e_3,mem_patch3e
	fetch 1,mem_ui_button_gpio
	rtneq UI_BUTTON_GPIO_DISABLE
	copy pdata,temp
	call gpio_get_bit
	nbranch ui_button_up,true
	//fall through
ui_button_down:
	call ui_button_check_long_press
	fetch 2,mem_ui_state_map
	set1 UI_STATE_BTN_DOWN
	store 2,mem_ui_state_map
	fetch 1,mem_ui_button_last_state
	rtneq UI_BUTTON_STATE_DOWN
	jam UI_BUTTON_STATE_DOWN,mem_ui_button_last_state
	//Down Edge
	fetch 1,mem_ui_button_timeout
	store 1,mem_ui_button_timer //start long press timer
	call lpm_button_get_wake_lock
	jam BT_EVT_BUTTON_DOWN,mem_fifo_temp
	branch ui_ipc_send_event
ui_button_up:
	fetch 2,mem_ui_state_map
	set0 UI_STATE_BTN_DOWN
	store 2,mem_ui_state_map
	fetch 1,mem_ui_button_last_state
	rtneq UI_BUTTON_STATE_UP
	jam UI_BUTTON_STATE_UP,mem_ui_button_last_state
	//Up Edge
	jam 0,mem_ui_button_timer//stop long press timer
	call lpm_button_clean_wake_lock
	jam BT_EVT_BUTTON_UP,mem_fifo_temp
	branch ui_ipc_send_event

ui_button_check_long_press:
	fetch 1,mem_ui_button_timer
	rtn blank
	increase -1,pdata
	store 1,mem_ui_button_timer
	nrtn blank
	//Long Press
	jam BT_EVT_BUTTON_LONG_PRESSED,mem_fifo_temp
	branch ui_ipc_send_event

lpm_button_get_wake_lock:
	arg wake_lock_button,queue
	branch lpm_get_wake_lock
	
lpm_button_clean_wake_lock:
	arg wake_lock_button,queue
	branch lpm_put_wake_lock



/***********************ui led function****************************/
/******************
led function

ui_led_init_global
ui_led_on_global

ui_led_off_global
//input:rega :struct number
ui_led_blink_start_global

//input:rega :struct number
//contr: the point that want to set led style address
ui_led_set_style_global

******************/
//input:rega :struct number
//output:regb :current strutct starting pointer
calc_curr_struct_prt:
	fetch 2,mem_ui_led_struct_ptr
	mul32 rega,LED_OFFSET_LENGTH,regb
	iadd regb,regb
	rtn


ui_led_init_global:
	fetch 1,mem_ui_led_struct_num
	rtn blank
	copy pdata,loopcnt
	fetch 2,mem_ui_led_struct_ptr
	copy pdata,regb
ui_led_init_loop:
	add regb,LED_OFFSET_LED_GPIO,regc
	ifetcht 1,regc
	call gpio_config_output
	call ui_led_off_static
	increase LED_OFFSET_LENGTH,regb
	loop ui_led_init_loop
	rtn

	
//input:rega :struct number
ui_led_on_global:
	call calc_curr_struct_prt
	setarg UI_LED_STATE_LIGHTING
	istore 1,regb
	call ui_led_stop_timer
	branch ui_led_on_static

	
//input:rega :struct number
ui_led_blink_stop_global:
ui_led_off_global:
	call calc_curr_struct_prt
	setarg UI_LED_STATE_DARKING
	istore 1,regb
	call ui_led_stop_timer
	branch ui_led_off_static


//input:rega :struct number
ui_led_blink_start_global:
	call calc_curr_struct_prt
	setarg UI_LED_STATE_BLINK_START
	istore 1,regb
	setarg LED_INFINITE_FLASH_NUM
	istore 1,contw
	branch ui_led_off_static


//input:rega :struct number
//REGC: the point that want to set led style address
ui_led_set_style_global:
	call calc_curr_struct_prt
	arg LED_OFFSET_LENGTH,loopcnt
	copy regc,contr
	copy regb,contw
	branch memcpy_fast



ui_led_dispatch:
	fetch 1,mem_ui_led_struct_num
	rtn blank
	arg 0,rega
ui_led_blink_polling:
	call ui_led_change_style_by_type
	increase 1,rega
	fetch 1,mem_ui_led_struct_num
	isub rega,null
	rtn zero
	branch ui_led_blink_polling


ui_led_off_static:
	add regb,LED_OFFSET_LED_GPIO,regc
	ifetcht 1,regc
	branch gpio_out_inactive


ui_led_on_static:
	add regb,LED_OFFSET_LED_GPIO,regc
	ifetcht 1,regc
	branch gpio_out_active


//input:rega :struct number
ui_led_change_style_by_type:
	add rega,ui_led_blink,queue
	call timer_check
	nrtn blank			//timer out
	
	call calc_curr_struct_prt

	ifetch 1,regb			//led type

	beq UI_LED_STATE_LIGHTING,ui_led_on_static
	beq UI_LED_STATE_DARKING,ui_led_off_static
	beq UI_LED_STATE_BLINK_STOP,ui_led_off_static
	beq UI_LED_STATE_BLINK_DARKING,ui_led_blink_state_darking
ui_led_blink_state_lighting:
	call ui_led_on_static
	add regb,LED_OFFSET_CB_LEDON,regc
	call push_stack
	ifetch 2,regc
	call callback_func
	call pop_stack
	setarg UI_LED_STATE_BLINK_DARKING
	istore 1,regb
	add regb,LED_OFFSET_ON_TIME,regc
	ifetch 2,regc
	branch ui_led_blink_timer_start
	

ui_led_blink_state_darking:
	call ui_led_off_static
	add regb,LED_OFFSET_CB_LEDOFF,regc
	call push_stack
	ifetch 2,regc
	call callback_func
	call pop_stack
	
	add regb,LED_OFFSET_BLINK_COUNT,regc
	ifetch 1,regc
	beq LED_INFINITE_FLASH_NUM,ui_led_blink_infinite
	increase -1,pdata
	istore 1,regc
	branch ui_led_blink_stop_global,blank		//End of flicker
ui_led_blink_infinite:
	setarg UI_LED_STATE_BLINK_LIGHTING
	istore 1,regb
	add regb,LED_OFFSET_OFF_TIME,regc
	ifetch 2,regc
ui_led_blink_timer_start:
	add rega,ui_led_blink,queue
	branch timer_init

ui_led_stop_timer:
	setarg 0
	branch ui_led_blink_timer_start

/***********************ui led function ending****************************/



ui_timer_timeout:
	setarg 0x1000
	lshift16 pdata,pdata
	iadd regb,regb
	rtn
	
ui_timer_check:
	bpatchx patch3e_4,mem_patch3e
	arg 0,rega
	fetcht 4,mem_ui_timer_last_btclk
	copy clkn_bt,regb
	copy regb,pdata
	isub temp,null
	ncall ui_timer_timeout,positive
	//call ice_break
ui_timer_check_loop:
	copy regb,pdata
	increase 160,temp    //320btclk = 100ms
	increase 160,temp
	isub temp,null
	nbranch ui_timer_check_end,positive
	increase 1,rega   //increase 1 every 100ms count
	and rega,0x0f,pdata
	nbranch ui_timer_check_loop,blank
	arg 0,rega  //reset timer if it's longer than 1.5s between 2 checks
	call ui_timer_check_send_evt
ui_timer_init:
	copy clkn_bt,pdata
	store 4,mem_ui_timer_last_btclk
	rtn
ui_timer_check_end:
	bpatchx patch3e_5,mem_patch3e
	copy rega,pdata
	rtn blank
	increase -160,temp    //320btclk = 100ms
	increase -160,temp
	set0 28,temp
	storet 4,mem_ui_timer_last_btclk
ui_timer_check_send_evt:
	branch app_evt_timer

	

//**********************************************************//
//************UI Inter-Processor Communication*******//
//**********************************************************//
ui_ipc_get_lock:
	jam 1,mem_ipc_lock_bt
ui_ipc_get_lock_wait:
	fetch 1,mem_ipc_lock_c51
	nbranch ui_ipc_get_lock_wait,blank
	rtn
	
ui_ipc_put_lock:
	jam 0,mem_ipc_lock_bt
	rtn
	

	
ui_ipc_send_event:
	bpatchx patch3e_6,mem_patch3e
	call ui_ipc_get_lock
	copy rega,pdata
	store 4,mem_ipc_rega_temp
	arg mem_ipc_fifo_bt2c51,rega
	call fifo_in
	fetch 4,mem_ipc_rega_temp
	copy pdata,rega
	branch ui_ipc_put_lock

ui_ipc_send_cmd:
	bpatchx patch3e_7,mem_patch3e
	call ui_ipc_get_lock
	copy rega,pdata
	store 4,mem_ipc_rega_temp	
	arg mem_ipc_fifo_c512bt,rega
	call fifo_in
	fetch 4,mem_ipc_rega_temp
	copy pdata,rega	
	branch ui_ipc_put_lock

ui_ipc_clean_all_fifo:
	setarg 0
	store UTIL_FIFO_LEN,mem_ipc_fifo_c512bt
	store UTIL_FIFO_LEN,mem_ipc_fifo_bt2c51
	rtn
	
check_51cmd:
	bpatchx patch3f_0,mem_patch3f
	fetch 1,mem_hci_cmd
	nrtn blank
	arg mem_ipc_fifo_c512bt,rega
	call fifo_is_empty
	rtn blank
	jam IPC_CONTINUE_PROCESS,mem_ipc_skip_continue_proc
	call check_51cmd_once
	fetch 1,mem_ipc_skip_continue_proc
	branch check_51cmd,blank
	rtn

check_51cmd_once:
	call ui_ipc_get_lock
	arg mem_ipc_fifo_c512bt,rega
	call fifo_out
	copy pdata,temp
	call ui_ipc_put_lock
	bpatchx patch3f_1,mem_patch3f
	copy temp,pdata
	rtn blank
 	beq BT_CMD_START_DISCOVERY,check_51cmd_start_discovery
  	beq BT_CMD_STOP_DISCOVERY,check_51cmd_stop_discovery
  	beq BT_CMD_RECONNECT,check_51cmd_reconnect
  	beq BT_CMD_ENTER_SNIFF_SUBRATING,check_51cmd_enter_sniff_subrating
  	beq BT_CMD_EXIT_SNIFF_SUBRATING,check_51cmd_exit_sniff_subrating
  	beq BT_CMD_SNIFF_TEST,check_51cmd_sniff_test
	beq BT_CMD_START_INQUIRY,check_51cmd_inq
	beq BT_CMD_STOP_INQUIRY,check_51cmd_stop_inq
	beq BT_CMD_START_ADV,check_51cmd_adv
	beq BT_CMD_STOP_ADV,check_51cmd_stop_adv
	beq BT_CMD_START_DIRECT_ADV,check_51cmd_direct_adv
	beq BT_CMD_STOP_DIRECT_ADV,check_51cmd_stop_direct_adv
	beq BT_CMD_LED_OFF,check_51cmd_led_off
	beq BT_CMD_LED_ON,check_51cmd_led_on
	beq BT_CMD_LED_BLINK,check_51cmd_led_start_blink
	beq BT_CMD_LE_START_CONN,check_51cmd_le_start_con
	beq BT_CMD_LE_START_SCAN,check_51cmd_start_scan
	beq BT_CMD_LE_STOP_SCAN,check_51cmd_stop_scan
	beq BT_CMD_ENTER_HIBERNATE,check_51cmd_hibernate
	beq BT_CMD_LE_SMP_SECURITY_REQUEST,check_51cmd_le_smp_sec_req
	beq BT_CMD_BB_RECONN_CANCEL,check_51cmd_bb_reconn_cancel
	//context related, process in context
	store 1,mem_fifo_temp
	bpatchx patch3f_2,mem_patch3f
	call lmo_fifo_check
	nbranch check_51cmd_restore,blank  //process this cmd next time while lmo fifo is full
check_51cmd_once_continue:
	fetch 1,mem_fifo_temp
	bmark0 mark_context,check_51cmd_check_idle
	beq BT_CMD_DISCONNECT,check_51cmd_disconnect
  	beq BT_CMD_ENTER_SNIFF,cmd_in_sniff
  	beq BT_CMD_EXIT_SNIFF,cmd_exit_sniff
  	beq BT_CMD_SET_PIN_CODE,check_51cmd_pincode
	beq BT_CMD_LE_DISCONNECT,check_51cmd_le_disconnect
	beq BT_CMD_LE_UPDATE_CONN,check_51cmd_ble_update_connect_param
	beq BT_CMD_ROLE_SWITCH,check_51cmd_role_switch
	beq BT_CMD_STORE_RECONN_INFO_LE,eeprom_store_le_reconn_info
	beq BT_CMD_STORE_RECONN_INFO_BT,eeprom_store_bd_reconn_info
	beq BT_CMD_DHKEY_NOT_ACCEPT,check_51cmd_dhkey_not_accept
	beq BT_CMD_STORE_RECONN_INFO,check_51cmd_store_reconn_info
	rtn

check_51cmd_check_idle:
	store 1,mem_fifo_temp
  	call context_check_idle
	branch check_51cmd_restore,zero
	call context_search_plap
	nrtn zero
check_51cmd_restore:
	jam IPC_SKIP_CONTINUE_PROCESS,mem_ipc_skip_continue_proc
	branch ui_ipc_send_cmd
  
 /******************** 51COMMAND*********************/

//command opcode 0x01	
check_51cmd_start_discovery:
	fetch 2,mem_ui_state_map
	set1 UI_STATE_BT_DISCOVERY
	store 2,mem_ui_state_map
	jam 3,mem_scan_mode
	rtn


//command opcode 0x02	
check_51cmd_stop_discovery:
	jam 0,mem_hid_handshake_timer_count
	jam 0,mem_scan_mode
	fetch 2,mem_ui_state_map
	set0 UI_STATE_BT_DISCOVERY
	store 2,mem_ui_state_map
	rtn	


//command opcode 0x03	
check_51cmd_reconnect:	
	jam hci_cmd_create_conn,mem_hci_cmd
	rtn	


//command opcode 0x04
check_51cmd_disconnect:
	jam LMP_DETACH,mem_lmo_opcode2
	jam OTHER_END_TERMINATED,mem_disconn_reason_send
	rtn

	
//command opcode 0x07
check_51cmd_enter_sniff_subrating:
	rtn


//command opcode 0x08
check_51cmd_exit_sniff_subrating:
	rtn	


//command opcode 0x09
check_51cmd_sniff_test:
	rtn	


//command opcode 0x10
check_51cmd_pincode:
	jam pincode_state_pincode_ready,mem_pincode_state
	branch cmd_pair


//command opcode 0x11
check_51cmd_inq:
	rtn


//command opcode 0x12
check_51cmd_stop_inq:
	rtn


//command opcode 0x13
check_51cmd_adv:
	jam ON,mem_le_adv_enable
	jam ADV_IND,mem_le_adv_type
	fetch 2,mem_ui_state_map
	set1 UI_STATE_BLE_ADV,pdata
	store 2,mem_ui_state_map
	rtn


//command opcode 0x14
check_51cmd_stop_adv:
	fetch 2,mem_ui_state_map
	set0 UI_STATE_BLE_ADV,pdata
	store 2,mem_ui_state_map
	jam OFF,mem_le_adv_enable
	rtn


//command opcode 0x15
check_51cmd_direct_adv:
	jam ON,mem_le_adv_enable
	jam ADV_DIRECT_IND,mem_le_adv_type
	fetch 2,mem_ui_state_map
	set1 UI_STATE_BLE_ADV,pdata
	store 2,mem_ui_state_map
	rtn


//command opcode 0x16
check_51cmd_stop_direct_adv:
	fetch 2,mem_ui_state_map
	set0 UI_STATE_BLE_ADV,pdata
	store 2,mem_ui_state_map
	jam OFF,mem_le_adv_enable
	rtn


//command opcode 0x17
check_51cmd_le_disconnect:
	setarg 20 // 100ms
	store 2,mem_le_superto
	store 2,mem_le_init_superto
	branch le_send_terminate_ind_user_terminated


//command opcode 0x18
check_51cmd_ble_update_connect_param:
	branch le_l2cap_tx_update_req


//command opcode 19
check_51cmd_led_off:
	arg 0,rega
	branch ui_led_off_global


//command opcode 20
check_51cmd_led_on:
	arg 0,rega
	branch ui_led_on_global


//command opcode 21
check_51cmd_led_start_blink:
	arg 0,rega
	branch ui_led_blink_start_global


//command opcode 0x22
check_51cmd_le_start_con:
	jam ON,mem_le_scan_enable
	jam hci_cmd_le_create_conn,mem_hci_cmd
//	fetch 6,mem_app_peer_addr
//	store 6,mem_le_conn_peer_addr
	rtn


//command opcode 0x23
check_51cmd_start_scan:
	jam ON,mem_le_scan_enable
	rtn


//command opcode 0x24
check_51cmd_stop_scan:
	jam OFF,mem_le_scan_enable
	jam 0,mem_hci_cmd
	rtn


//command opcode 0x25
check_51cmd_hibernate:
	fetch 2,mem_cb_before_hibernate
	call callback_func
	fetch 1,mem_ui_button_gpio
	beq UI_BUTTON_GPIO_DISABLE,check_51cmd_hibernate_btn_disabled
	copy pdata,temp
	call gpio_config_input
check_51cmd_hibernate_btn_disabled:
	call ui_ipc_clean_all_fifo
	branch lpm_hibernate	


//command opcode 0x27
check_51cmd_le_smp_sec_req:
	branch le_send_smp_security_request


//command opcode 0x29
check_51cmd_role_switch:
  	jam LMP_SLOT_OFFSET,mem_lmo_opcode2
	set1 mark_switch_initiated,mark
	nrtn master
	jam SWITCH_FLAG_INIT,mem_switch_flag
	jam LMP_SWITCH_REQ ,mem_lmo_opcode2
	fetch 1,mem_connection_options
	set0 CONNECTION_SWITCH,pdata
	store 1,mem_connection_options
	rtn


//command opcode 0x30
check_51cmd_bb_reconn_cancel:
	force page_length_timer,queue
	branch timer_stop


//command opcode 0x33
check_51cmd_dhkey_not_accept:
	call tid_set_reply
	jam LMP_DHKey_Check,mem_lmi_opcode2
	branch parse_lmp_dhkey_check_reject	


ui_check_paring_button:
	fetch 1,mem_ui_state_map
	rtnbit0 UI_STATE_BTN_DOWN
	rtnbit0 UI_STATE_BT_RECONNECT
	branch check_51cmd_bb_reconn_cancel



///////////queue function////////////
queue_init:
	fetch 2,mem_queue_ptr
	add pdata,QUEUE_OFFSET_CURR_NUM,contw
	setarg 0
	istore 3,contw
	rtn
	
//input:rega:the address of the data to which you want to input queue
//output:if user is disable,mean queue no have space
queue_push:
	call disable_user
	call queue_full
	rtn blank
	fetch 2,mem_queue_ptr
	add pdata,QUEUE_OFFSET_CURR_NUM,regb
	ifetcht 1,regb
	increase 1,temp
	istoret 1,regb	//number add 
	
	ifetcht 1,pdata	//temp:each length
	copy temp,loopcnt
	add pdata,QUEUE_OFFSET_WRITE_PTR,regb
	ifetch 1,regb
	imul32 temp,pdata	//offset
	iadd contr,contw
	copy rega,contr
calc_queue_next_ptr:
	call memcpy
	call queue_get_size
	pincrease -1
	ifetcht 1,regb
	increase 1,temp
	iand temp,temp
	istoret 1,regb
	branch enable_user


//input:rega:the address of the data to which you want to output queue
//output:if user is disable,mean queue no have data
queue_pop:
	call disable_user
	call queue_empty
	rtn blank
	fetch 2,mem_queue_ptr
	add pdata,QUEUE_OFFSET_CURR_NUM,regb
	ifetcht 1,regb
	increase -1,temp
	istoret 1,regb
	ifetcht 1,pdata		//each size
	copy temp,loopcnt
	add pdata,QUEUE_OFFSET_READ_PTR,regb
	ifetch 1,regb
	imul32 temp,pdata	//offset
	iadd contr,contr
	increase 1,contr
	copy rega,contw
	branch calc_queue_next_ptr


//output:if blank is 1,mean queue is empty
queue_empty:
	fetch 2,mem_queue_ptr
	add pdata,QUEUE_OFFSET_CURR_NUM,contr
	ifetch 1,contr
	rtn

//output:if blank is 1,mean queue is full
queue_full:
	call queue_get_size
	ifetcht 1,contr
	isub temp,pdata
	rtn

//output:pdata is queue size
queue_get_size:
	fetch 2,mem_queue_ptr
	add pdata,QUEUE_OFFSET_LENGTH,contr
	ifetch 1,contr
	rtn

///////////queue function end////////////




